// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: boat.sql

package db

import (
	"context"
)

const getAllBoats = `-- name: GetAllBoats :many
SELECT id, name, description, "numberPeople", "mainImageURL", "basePrice", "id_boatType", id_destination, "created_At" FROM boats
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBoatsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBoats(ctx context.Context, arg GetAllBoatsParams) ([]Boat, error) {
	rows, err := q.db.Query(ctx, getAllBoats, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Boat{}
	for rows.Next() {
		var i Boat
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.NumberPeople,
			&i.MainImageURL,
			&i.BasePrice,
			&i.IDBoatType,
			&i.IDDestination,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoat = `-- name: GetBoat :one

SELECT id, name, description, "numberPeople", "mainImageURL", "basePrice", "id_boatType", id_destination, "created_At" FROM boats
WHERE id = $1 LIMIT 1
`

// -- name: CreateBoat :one
// INSERT INTO Boats (
//
//	owner,
//	balance,
//	currency
//
// ) VALUES (
//
//	$1, $2, $3
//
// ) RETURNING *;
func (q *Queries) GetBoat(ctx context.Context, id int32) (Boat, error) {
	row := q.db.QueryRow(ctx, getBoat, id)
	var i Boat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NumberPeople,
		&i.MainImageURL,
		&i.BasePrice,
		&i.IDBoatType,
		&i.IDDestination,
		&i.CreatedAt,
	)
	return i, err
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TourismAgencyBack.Infrastructure.Persistence;

#nullable disable

namespace TourismAgencyBack.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoatBoatEquipment", b =>
                {
                    b.Property<Guid>("BoatEquipmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoatsId")
                        .HasColumnType("uuid");

                    b.HasKey("BoatEquipmentsId", "BoatsId");

                    b.HasIndex("BoatsId");

                    b.ToTable("BoatBoatEquipment");
                });

            modelBuilder.Entity("TourismAgencyBack.Domain.BoatAggregate.Boat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("BoatTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uuid");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("NumberPeople")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BoatTypeId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Boats", (string)null);
                });

            modelBuilder.Entity("TourismAgencyBack.Domain.BoatEquipmentAggregate.BoatEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("BoatEquipments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10bdf658-4d44-4b08-9e9d-6e428c0d7599"),
                            IconClass = "fas fa-music",
                            Name = "Equipo de Sonido"
                        },
                        new
                        {
                            Id = new Guid("ec0c1117-2773-4386-90f6-cf8d3e224317"),
                            IconClass = "fas fa-umbrella-beach",
                            Name = "Toldo"
                        });
                });

            modelBuilder.Entity("TourismAgencyBack.Domain.BoatTypeAggregate.BoatType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("BoatTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("41555459-5395-4019-a142-15e6e000427f"),
                            Name = "Peñero"
                        },
                        new
                        {
                            Id = new Guid("d1e72775-ced0-4a76-b60a-780dc0f78978"),
                            Name = "Yate"
                        },
                        new
                        {
                            Id = new Guid("1427d1d6-6b22-4130-81d7-3b56f0382e9c"),
                            Name = "Lancha"
                        },
                        new
                        {
                            Id = new Guid("26e0da4e-3389-4dc5-8313-c6dedc5f618c"),
                            Name = "Catamarán"
                        },
                        new
                        {
                            Id = new Guid("39d5495b-98bf-4328-89e9-abd76c4dbebe"),
                            Name = "Ferry"
                        });
                });

            modelBuilder.Entity("TourismAgencyBack.Domain.Destinations.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Destinations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bfed66a-1ca4-46e7-8181-5e117f1ddc66"),
                            Name = "Parque Nacional Morrocoy"
                        },
                        new
                        {
                            Id = new Guid("ab012a75-da36-4bfc-9cbc-924bc5551805"),
                            Name = "Margarita"
                        },
                        new
                        {
                            Id = new Guid("602c6e28-5acb-48f0-b85c-bbe09a21cf37"),
                            Name = "Caracas"
                        });
                });

            modelBuilder.Entity("BoatBoatEquipment", b =>
                {
                    b.HasOne("TourismAgencyBack.Domain.BoatEquipmentAggregate.BoatEquipment", null)
                        .WithMany()
                        .HasForeignKey("BoatEquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourismAgencyBack.Domain.BoatAggregate.Boat", null)
                        .WithMany()
                        .HasForeignKey("BoatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourismAgencyBack.Domain.BoatAggregate.Boat", b =>
                {
                    b.HasOne("TourismAgencyBack.Domain.BoatTypeAggregate.BoatType", "BoatType")
                        .WithMany("Boats")
                        .HasForeignKey("BoatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourismAgencyBack.Domain.Destinations.Destination", "Destination")
                        .WithMany("Boats")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TourismAgencyBack.Domain.BoatAggregate.Entities.BoatImageUrl", "BoatImageUrls", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("BoatImageUrlId");

                            b1.Property<Guid>("BoatId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("Id", "BoatId");

                            b1.HasIndex("BoatId");

                            b1.ToTable("BoatImageUrls", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BoatId");
                        });

                    b.Navigation("BoatImageUrls");

                    b.Navigation("BoatType");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TourismAgencyBack.Domain.BoatTypeAggregate.BoatType", b =>
                {
                    b.Navigation("Boats");
                });

            modelBuilder.Entity("TourismAgencyBack.Domain.Destinations.Destination", b =>
                {
                    b.Navigation("Boats");
                });
#pragma warning restore 612, 618
        }
    }
}
